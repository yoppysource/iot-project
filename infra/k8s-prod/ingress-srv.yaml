apiVersion: networking.k8s.io/v1
kind: Ingress
# Load Balancer -> Ingress Controler으로 보냄 여기서 어디 pod으로 보낼 지 결정
metadata:
  name: ingress-service
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/use-regex: "true"
spec:
  rules:
    - host: livfarm.com
      http:
        paths:
          - path: /api/v1/?(.*) # Catch ALL 위에서 api path가 아니면 내려오면서 매칭함 그래서 항상 path범위가 좁은걸 위에 둘 것!
            pathType: Prefix
            backend:
              service:
                name: iot-backend-srv
                port:
                  number: 3000
# ---
# apiVersion: v1
# kind: Service
# metadata:
#   annotations:
#     service.beta.kubernetes.io/do-loadbalancer-enable-proxy-protocol: "true"
#     service.beta.kubernetes.io/do-loadbalancer-hostname: "www.livfarm.com"
#   labels:
#     helm.sh/chart: ingress-nginx-2.0.3
#     app.kubernetes.io/name: ingress-nginx
#     app.kubernetes.io/instance: ingress-nginx
#     app.kubernetes.io/version: 0.32.0
#     app.kubernetes.io/managed-by: Helm
#     app.kubernetes.io/component: controller
#   name: ingress-nginx-controller
#   namespace: ingress-nginx
# spec:
# # Tells Kubernetes to reach out to its provider and provision a load balancer.
# # Gets traffic in to a sigle pod
#   type: LoadBalancer
#   externalTrafficPolicy: Local
#   ports:
#     - name: http
#       port: 80
#       protocol: TCP
#       targetPort: http
#     - name: https
#       port: 443
#       protocol: TCP
#       targetPort: https
#   selector:
#     app.kubernetes.io/name: ingress-nginx
#     app.kubernetes.io/instance: ingress-nginx
#     app.kubernetes.io/component: controller
