apiVersion: networking.k8s.io/v1
kind: Ingress
# Load Balancer -> Ingress Controler으로 보냄 여기서 어디 pod으로 보낼 지 결정
metadata:
  name: ingress-service
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/use-regex: "true"
    # https://www.cloudsavvyit.com/10240/how-to-redirect-to-www-with-nginx-ingress/
    nginx.ingress.kubernetes.io/from-to-www-redirect: "true"  
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - livfarm.com
    secretName: livfarm-tls
  rules:
    - host: livfarm.com
      http:
        paths:
          - path: /api/v1/?(.*) # Catch ALL 위에서 api path가 아니면 내려오면서 매칭함 그래서 항상 path범위가 좁은걸 위에 둘 것!
            pathType: Prefix
            backend:
              service:
                name: iot-backend-srv
                port:
                  number: 3000
          - path: /?(.*)
            pathType: Prefix
            backend:
              service:
                name: landing-page-srv
                port:
                  number: 3000     
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    service.beta.kubernetes.io/do-loadbalancer-enable-proxy-protocol: 'true'
    service.beta.kubernetes.io/do-loadbalancer-hostname: 'load.livfarm.com'
  labels:
    helm.sh/chart: ingress-nginx-2.11.1
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: ingress-nginx
    app.kubernetes.io/version: 0.34.1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  name: ingress-nginx-controller
  namespace: ingress-nginx
spec:
  type: LoadBalancer
  externalTrafficPolicy: Local
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
    - name: https
      port: 443
      protocol: TCP
      targetPort: https
  selector:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: ingress-nginx
    app.kubernetes.io/component: controller